summarise(avg_pitcher_age = round(mean(Age), 3))
avg_batter_age_summary <- active_batters %>%
group_by(Tm) %>%
summarise(avg_batter_age = round(mean(Age), 3))
# Merge tables
avg_age_summary <- merge(avg_pitcher_age_summary, avg_batter_age_summary, by="Tm")
logos <- merge(current_teams, teamcolors, by="name")
current_teams <- read.csv("/Users/maxclowdus/Downloads/MLB_teams.csv")
logos <- merge(current_teams, teamcolors, by="name")
avg_age_summary <- merge(logos, avg_age_summary, by="Tm")
View(avg_age_summary)
View(logos)
active_pitchers <- read.csv("/Users/maxclowdus/Downloads/active_pitchers_8-3.csv")
active_batters <- read.csv("/Users/maxclowdus/Downloads/active_batters_8-3.csv")
# Clean data to include players active team and his total stats for the year
# Group by player name
active_pitchers <- active_pitchers %>%
group_by(Name) %>%
# We will get last occurrence of player to get current team
filter(row_number()==n())
active_batters <- active_batters %>%
group_by(Name) %>%
# We will get last occurrence of player to get current team
filter(row_number()==n())
# Clean data to only include certain subset of player:
# The active_batters file will contain players who played at least 40 games
# The active_pitchers file will contain pitchers who have pitched at least 30 innings
active_batters <- active_batters[active_batters$G > 40, ]
active_pitchers <- active_pitchers[active_pitchers$IP > 30.0, ]
# Isolate columns of interest
active_pitchers <- active_pitchers %>%
dplyr::select(Name, Age, Tm, Lg)
active_batters <- active_batters %>%
dplyr::select(Name, Age, Tm, Lg)
# Create summary table with average ages for each team
avg_pitcher_age_summary <- active_pitchers %>%
group_by(Tm) %>%
summarise(avg_pitcher_age = round(mean(Age), 3))
avg_batter_age_summary <- active_batters %>%
group_by(Tm) %>%
summarise(avg_batter_age = round(mean(Age), 3))
# Merge tables
avg_age_summary <- merge(avg_pitcher_age_summary, avg_batter_age_summary, by="Tm")
current_teams <- read.csv("/Users/maxclowdus/Downloads/MLB_teams.csv")
logos <- merge(current_teams, teamcolors, by="name")
avg_age_summary <- merge(logos, avg_age_summary, by="Tm")
ggplot(avg_age_summary, aes(avg_batter_age, avg_pitcher_age)) +
ggimage::geom_image(aes(image = logo), size = 0.08, by = "width",
asp = 1.618) +
geom_hline(yintercept = mean(avg_age_summary$avg_pitcher_age)) +
geom_vline(xintercept = mean(avg_age_summary$avg_batter_age))
# Plot avg batter age vs avg pitcher age for each team using logos as data points
#install.packages("ggimage",dependencies = TRUE)
library(tidyverse)
library(dplyr)
active_pitchers <- read.csv("/Users/maxclowdus/Downloads/active_pitchers_8-3.csv")
active_batters <- read.csv("/Users/maxclowdus/Downloads/active_batters_8-3.csv")
# Clean data to include players active team and his total stats for the year
# Group by player name
active_pitchers <- active_pitchers %>%
group_by(Name) %>%
# We will get last occurrence of player to get current team
filter(row_number()==n())
active_batters <- active_batters %>%
group_by(Name) %>%
# We will get last occurrence of player to get current team
filter(row_number()==n())
# Clean data to only include certain subset of player:
# The active_batters file will contain players who played at least 40 games
# The active_pitchers file will contain pitchers who have pitched at least 30 innings
active_batters <- active_batters[active_batters$G > 40, ]
active_pitchers <- active_pitchers[active_pitchers$IP > 30.0, ]
# Isolate columns of interest
active_pitchers <- active_pitchers %>%
dplyr::select(Name, Age, Tm, Lg)
active_batters <- active_batters %>%
dplyr::select(Name, Age, Tm, Lg)
# Create summary table with average ages for each team
avg_pitcher_age_summary <- active_pitchers %>%
group_by(Tm) %>%
summarise(avg_pitcher_age = round(mean(Age), 3))
avg_batter_age_summary <- active_batters %>%
group_by(Tm) %>%
summarise(avg_batter_age = round(mean(Age), 3))
# Merge tables
avg_age_summary <- merge(avg_pitcher_age_summary, avg_batter_age_summary, by="Tm")
# Plot
library(teamcolors)
library(ggimage)
current_teams <- read.csv("/Users/maxclowdus/Downloads/MLB_teams.csv")
logos <- merge(current_teams, teamcolors, by="name")
avg_age_summary <- merge(logos, avg_age_summary, by="Tm")
# Need to map team city and team name to the abbreviation we currently have
# This is to accommodate the teamscolor package for logos
ggplot(avg_age_summary, aes(avg_batter_age, avg_pitcher_age)) +
ggimage::geom_image(aes(image = logo), size = 0.05, by = "width",
asp = 1.618) +
geom_hline(yintercept = mean(avg_age_summary$avg_pitcher_age)) +
geom_vline(xintercept = mean(avg_age_summary$avg_batter_age))
View(active_pitchers)
ggplot(mapping = aes(mean(active_batters$Age), mean(active_pitchers$age))) +
geom_point()
# Plot avg batter age vs avg pitcher age for each team using logos as data points
#install.packages("ggimage",dependencies = TRUE)
library(tidyverse)
library(dplyr)
active_pitchers <- read.csv("/Users/maxclowdus/Downloads/active_pitchers_8-3.csv")
active_batters <- read.csv("/Users/maxclowdus/Downloads/active_batters_8-3.csv")
# Clean data to include players active team and his total stats for the year
# Group by player name
active_pitchers <- active_pitchers %>%
group_by(Name) %>%
# We will get last occurrence of player to get current team
filter(row_number()==n())
active_batters <- active_batters %>%
group_by(Name) %>%
# We will get last occurrence of player to get current team
filter(row_number()==n())
# Clean data to only include certain subset of player:
# The active_batters file will contain players who played at least 40 games
# The active_pitchers file will contain pitchers who have pitched at least 30 innings
active_batters <- active_batters[active_batters$G > 40, ]
active_pitchers <- active_pitchers[active_pitchers$IP > 30.0, ]
# Isolate columns of interest
active_pitchers <- active_pitchers %>%
dplyr::select(Name, Age, Tm, Lg)
active_batters <- active_batters %>%
dplyr::select(Name, Age, Tm, Lg)
# Create summary table with average ages for each team
avg_pitcher_age_summary <- active_pitchers %>%
group_by(Tm) %>%
summarise(avg_pitcher_age = round(mean(Age), 3))
avg_batter_age_summary <- active_batters %>%
group_by(Tm) %>%
summarise(avg_batter_age = round(mean(Age), 3))
# Merge tables
avg_age_summary <- merge(avg_pitcher_age_summary, avg_batter_age_summary, by="Tm")
# Plot
library(teamcolors)
library(ggimage)
current_teams <- read.csv("/Users/maxclowdus/Downloads/MLB_teams.csv")
logos <- merge(current_teams, teamcolors, by="name")
avg_age_summary <- merge(logos, avg_age_summary, by="Tm")
# Need to map team city and team name to the abbreviation we currently have
# This is to accommodate the teamscolor package for logos
ggplot(avg_age_summary, aes(avg_batter_age, avg_pitcher_age)) +
ggimage::geom_image(aes(image = logo), size = 0.05, by = "width",
asp = 1.618) +
geom_hline(yintercept = mean(avg_age_summary$avg_pitcher_age)) +
geom_vline(xintercept = mean(avg_age_summary$avg_batter_age))
ggplot(mapping = aes(mean(active_batters$Age), mean(active_pitchers$age))) +
geom_point()
View(active_batters)
typeof(active_batters$Age)
ggplot(avg_age_summary, aes(avg_batter_age, avg_pitcher_age)) +
ggimage::geom_image(aes(image = logo), size = 0.05, by = "width",
asp = 1.618) +
geom_hline(yintercept = mean(avg_age_summary$avg_pitcher_age)) +
geom_vline(xintercept = mean(avg_age_summary$avg_batter_age))
ggplot(mapping = aes(mean(active_batters$Age), mean(active_pitchers$Age))) +
geom_point()
# Need to map team city and team name to the abbreviation we currently have
# This is to accommodate the teamscolor package for logos
ggplot(avg_age_summary, aes(avg_batter_age, avg_pitcher_age)) +
ggimage::geom_image(aes(image = logo), size = 0.05, by = "width",
asp = 1.618) +
geom_hline(yintercept = mean(avg_age_summary$avg_pitcher_age)) +
geom_vline(xintercept = mean(avg_age_summary$avg_batter_age))
+ ggplot(mapping = aes(mean(active_batters$Age), mean(active_pitchers$Age))) +
geom_point()
ggplot(mapping = aes(mean(active_batters$Age), mean(active_pitchers$Age))) +
geom_point()
ggplot(avg_age_summary, aes(avg_batter_age, avg_pitcher_age)) +
ggimage::geom_image(aes(image = logo), size = 0.05, by = "width",
asp = 1.618) +
geom_hline(yintercept = mean(avg_age_summary$avg_pitcher_age)) +
geom_vline(xintercept = mean(avg_age_summary$avg_batter_age))
+ ggplot(mapping = aes(mean(active_batters$Age), mean(active_pitchers$Age))) +
geom_point()
# This is to accommodate the teamscolor package for logos
ggplot(avg_age_summary, aes(avg_batter_age, avg_pitcher_age)) +
ggimage::geom_image(aes(image = logo), size = 0.05, by = "width",
asp = 1.618) +
geom_hline(yintercept = mean(avg_age_summary$avg_pitcher_age)) +
geom_vline(xintercept = mean(avg_age_summary$avg_batter_age)) +
ggplot(mapping = aes(mean(active_batters$Age), mean(active_pitchers$Age))) +
geom_point()
ggplot(avg_age_summary, aes(avg_batter_age, avg_pitcher_age)) +
ggimage::geom_image(aes(image = logo), size = 0.05, by = "width",
asp = 1.618) +
geom_hline(yintercept = mean(avg_age_summary$avg_pitcher_age)) +
geom_vline(xintercept = mean(avg_age_summary$avg_batter_age)) +
geom_point() +
geom_point(mapping = aes(mean(active_batters$Age), mean(active_pitchers$Age)), colour="red")
ggplot(avg_age_summary, aes(avg_batter_age, avg_pitcher_age)) +
ggimage::geom_image(aes(image = logo), size = 0.05, by = "width",
asp = 1.618) +
geom_hline(yintercept = mean(avg_age_summary$avg_pitcher_age)) +
geom_vline(xintercept = mean(avg_age_summary$avg_batter_age)) +
geom_point(mapping = aes(mean(active_batters$Age), mean(active_pitchers$Age)),
colour="red", label="League Average")
# Need to map team city and team name to the abbreviation we currently have
# This is to accommodate the teamscolor package for logos
ggplot(avg_age_summary, aes(avg_batter_age, avg_pitcher_age)) +
ggimage::geom_image(aes(image = logo), size = 0.05, by = "width",
asp = 1.618) +
geom_hline(yintercept = mean(avg_age_summary$avg_pitcher_age)) +
geom_vline(xintercept = mean(avg_age_summary$avg_batter_age)) +
geom_point(mapping = aes(mean(active_batters$Age), mean(active_pitchers$Age)),
colour="red", label="League Average") +
geom_text()
ggplot(avg_age_summary, aes(avg_batter_age, avg_pitcher_age)) +
ggimage::geom_image(aes(image = logo), size = 0.05, by = "width",
asp = 1.618) +
geom_hline(yintercept = mean(avg_age_summary$avg_pitcher_age)) +
geom_vline(xintercept = mean(avg_age_summary$avg_batter_age)) +
geom_point(mapping = aes(mean(active_batters$Age), mean(active_pitchers$Age),label="League Average"),
colour="red") +
geom_text()
# Need to map team city and team name to the abbreviation we currently have
# This is to accommodate the teamscolor package for logos
ggplot(avg_age_summary, aes(avg_batter_age, avg_pitcher_age)) +
ggimage::geom_image(aes(image = logo), size = 0.05, by = "width",
asp = 1.618) +
geom_hline(yintercept = mean(avg_age_summary$avg_pitcher_age)) +
geom_vline(xintercept = mean(avg_age_summary$avg_batter_age)) +
geom_point(mapping = aes(mean(active_batters$Age), mean(active_pitchers$Age)),
colour="red") +
geom_text(label="League Average")
# Need to map team city and team name to the abbreviation we currently have
# This is to accommodate the teamscolor package for logos
ggplot(avg_age_summary, aes(avg_batter_age, avg_pitcher_age)) +
ggimage::geom_image(aes(image = logo), size = 0.05, by = "width",
asp = 1.618) +
geom_hline(yintercept = mean(active_pitchers$Age)) +
geom_vline(xintercept = mean(active_batters$Age))
ops_leaders <- read.csv("/Users/maxclowdus/Downloads/OPS+_Leaders.csv")
View(ops_leaders)
ops_leaders <- ops_leaders %>%
group_by(Age) +
summarise(avg_ops_plus = mean(OPS..))
ops_leaders <- read.csv("/Users/maxclowdus/Downloads/OPS+_Leaders_8-9.csv")
ops_leaders <- ops_leaders %>%
group_by(Age) +
summarise(avg_ops_plus = mean(OPS_PL))
View(avg_pitcher_age_summary)
ops_leaders <- ops_leaders %>%
group_by(Age) %>%
summarise(avg_ops_plus = mean(OPS_PL))
ops_leaders <- read.csv("/Users/maxclowdus/Downloads/OPS+_Leaders_8-9.csv")
ops_by_age <- ops_leaders %>%
group_by(Age) %>%
summarise(avg_ops_plus = mean(OPS_PL))
ops_by_age <- ops_leaders %>%
group_by(Age) %>%
summarise(avg_ops_plus = round(mean(OPS_PL), 2))
View(ops_by_age)
View(ops_by_age)
# Plot avg batter age vs avg pitcher age for each team using logos as data points
#install.packages("ggimage",dependencies = TRUE)
library(tidyverse)
library(dplyr)
active_pitchers <- read.csv("/Users/maxclowdus/Downloads/active_pitchers_8-3.csv")
active_batters <- read.csv("/Users/maxclowdus/Downloads/active_batters_8-3.csv")
# Clean data to include players active team and his total stats for the year
# Group by player name
active_pitchers <- active_pitchers %>%
group_by(Name) %>%
# We will get last occurrence of player to get current team
filter(row_number()==n())
active_batters <- active_batters %>%
group_by(Name) %>%
# We will get last occurrence of player to get current team
filter(row_number()==n())
# Clean data to only include certain subset of player:
# The active_batters file will contain players who played at least 40 games
# The active_pitchers file will contain pitchers who have pitched at least 30 innings
active_batters <- active_batters[active_batters$G > 40, ]
active_pitchers <- active_pitchers[active_pitchers$IP > 30.0, ]
# Isolate columns of interest
active_pitchers <- active_pitchers %>%
dplyr::select(Name, Age, Tm, Lg)
active_batters <- active_batters %>%
dplyr::select(Name, Age, Tm, Lg)
# Create summary table with average ages for each team
avg_pitcher_age_summary <- active_pitchers %>%
group_by(Tm) %>%
summarise(avg_pitcher_age = round(mean(Age), 3))
avg_batter_age_summary <- active_batters %>%
group_by(Tm) %>%
summarise(avg_batter_age = round(mean(Age), 3))
# Merge tables
avg_age_summary <- merge(avg_pitcher_age_summary, avg_batter_age_summary, by="Tm")
# Plot
library(teamcolors)
library(ggimage)
current_teams <- read.csv("/Users/maxclowdus/Downloads/MLB_teams.csv")
logos <- merge(current_teams, teamcolors, by="name")
avg_age_summary <- merge(logos, avg_age_summary, by="Tm")
# Need to map team city and team name to the abbreviation we currently have
# This is to accommodate the teamscolor package for logos
ggplot(avg_age_summary, aes(avg_batter_age, avg_pitcher_age)) +
ggimage::geom_image(aes(image = logo), size = 0.05, by = "width",
asp = 1.618) +
geom_hline(yintercept = mean(active_pitchers$Age)) +
geom_vline(xintercept = mean(active_batters$Age))
# Now lets take all players with at least 600 AB (league-average-8/9)
# and analyze leaders by age
ops_leaders <- read.csv("/Users/maxclowdus/Downloads/OPS+_Leaders_8-9.csv")
ops_by_age <- ops_leaders %>%
group_by(Age) %>%
summarise(avg_ops_plus = round(mean(OPS_PL), 2))
ggplot(ops_by_age, aes(Age, avg_ops_plus)) +
gg_point()
ggplot(ops_by_age, aes(Age, avg_ops_plus)) +
geom_point()
ops_by_age <- ops_leaders %>%
group_by(Age) %>%
summarise(avg_ops_plus = round(mean(OPS_PL), 2),
player_count = count(Name))
ops_by_age <- ops_leaders %>%
group_by(Age) %>%
summarise(avg_ops_plus = round(mean(OPS_PL), 2),
player_count = count(Age))
ops_by_age <- ops_leaders %>%
summarize(player_count = count(Age)) %>%
group_by(Age) %>%
summarise(avg_ops_plus = round(mean(OPS_PL), 2))
ops_by_age <- ops_leaders %>%
summarize(player_count = dplyr::count(Age)) %>%
group_by(Age) %>%
summarise(avg_ops_plus = round(mean(OPS_PL), 2))
ops_by_age <- ops_leaders %>%
summarise(player_count = dplyr::count(Age)) %>%
group_by(Age) %>%
summarise(avg_ops_plus = round(mean(OPS_PL), 2))
type_of(Age)
typeof(Age)
typeof(ops_leaders$Age)
ops_by_age <- ops_leaders %>%
group_by(Age) %>%
summarise(avg_ops_plus = round(mean(OPS_PL), 2))
ops_leaders <- read.csv("/Users/maxclowdus/Downloads/OPS+_Leaders_8-9.csv")
ops_by_age <- ops_leaders %>%
group_by(Age) %>%
summarise(avg_ops_plus = round(mean(OPS_PL), 2),
age_count = tally())
ops_by_age <- ops_leaders %>%
group_by(Age) %>%
summarise(avg_ops_plus = round(mean(OPS_PL), 2),
age_count = tally(Age))
ops_by_age <- ops_leaders %>%
group_by(Age) %>%
summarise(avg_ops_plus = round(mean(OPS_PL), 2),
age_count = n(Age))
ops_by_age <- ops_leaders %>%
group_by(Age) %>%
summarise(avg_ops_plus = round(mean(OPS_PL), 2),
age_count = n())
ggplot(ops_by_age, aes(Age, age_count)) +
geom_point()
ggplot(ops_by_age, aes(Age, avg_ops_plus)) +
geom_point()
View(avg_age_summary)
View(active_batters)
f <- function(vector=1:3){
vector * 5
}
f()
f(c(1,1,1))
# Plot avg batter age vs avg pitcher age for each team using logos as data points
#install.packages("ggimage",dependencies = TRUE)
library(tidyverse)
library(dplyr)
active_pitchers <- read.csv("/Users/maxclowdus/Downloads/active_pitchers_8-3.csv")
active_batters <- read.csv("/Users/maxclowdus/Downloads/active_batters_8-3.csv")
# Clean data to include players active team and his total stats for the year
# Group by player name
active_pitchers <- active_pitchers %>%
group_by(Name) %>%
# We will get last occurrence of player to get current team
filter(row_number()==n())
# Plot avg batter age vs avg pitcher age for each team using logos as data points
#install.packages("ggimage",dependencies = TRUE)
library(tidyverse)
library(dplyr)
active_pitchers <- read.csv("/Users/maxclowdus/Downloads/active_pitchers_8-3.csv")
active_batters <- read.csv("/Users/maxclowdus/Downloads/active_batters_8-3.csv")
# Clean data to include players active team and his total stats for the year
# Group by player name
active_pitchers <- active_pitchers %>%
group_by(Name) %>%
# We will get last occurrence of player to get current team
filter(row_number()==n())
active_batters <- active_batters %>%
group_by(Name) %>%
# We will get last occurrence of player to get current team
filter(row_number()==n())
# Clean data to only include certain subset of player:
# The active_batters file will contain players who played at least 40 games
# The active_pitchers file will contain pitchers who have pitched at least 30 innings
active_batters <- active_batters[active_batters$G > 40, ]
active_pitchers <- active_pitchers[active_pitchers$IP > 30.0, ]
# Isolate columns of interest
active_pitchers <- active_pitchers %>%
dplyr::select(Name, Age, Tm, Lg)
active_batters <- active_batters %>%
dplyr::select(Name, Age, Tm, Lg)
# Create summary table with average ages for each team
avg_pitcher_age_summary <- active_pitchers %>%
group_by(Tm) %>%
summarise(avg_pitcher_age = round(mean(Age), 3))
avg_batter_age_summary <- active_batters %>%
group_by(Tm) %>%
summarise(avg_batter_age = round(mean(Age), 3))
# Merge tables
avg_age_summary <- merge(avg_pitcher_age_summary, avg_batter_age_summary, by="Tm")
# Plot
library(teamcolors)
library(ggimage)
current_teams <- read.csv("/Users/maxclowdus/Downloads/MLB_teams.csv")
logos <- merge(current_teams, teamcolors, by="name")
avg_age_summary <- merge(logos, avg_age_summary, by="Tm")
# Need to map team city and team name to the abbreviation we currently have
# This is to accommodate the teamscolor package for logos
ggplot(avg_age_summary, aes(avg_batter_age, avg_pitcher_age)) +
ggimage::geom_image(aes(image = logo), size = 0.05, by = "width",
asp = 1.618) +
geom_hline(yintercept = mean(active_pitchers$Age)) +
geom_vline(xintercept = mean(active_batters$Age))
# Now lets take all players with at least 600 AB (league-average-8/9)
# and analyze leaders by age
ops_leaders <- read.csv("/Users/maxclowdus/Downloads/OPS+_Leaders_8-9.csv")
ops_by_age <- ops_leaders %>%
group_by(Age) %>%
summarise(avg_ops_plus = round(mean(OPS_PL), 2),
age_count = n())
ggplot(ops_by_age, aes(Age, avg_ops_plus)) +
geom_point()
ggplot(ops_by_age, aes(Age, age_count)) +
geom_point()
rm(list = ls(all.names = TRUE))
# Start date: Tuesday, August 15th
# Running simulation from Mathletics to practice data wrangling, cleaning,
# and modeling. Variety of ways we can go from there to explore further.
library(tidyverse)
library(dplyr)
library(stringr)
library(reshape2)
setwd("/Users/maxclowdus/Desktop/R_Files/Mathletics")
#####################################################################
# First lets start by calculating the runs created (RC) for each MLB team
# in the 2021 season using Bill James' original, simplest equation.
team_stats <- read.csv("2021_team_stats.csv")
head(team_stats)
team_stats <- team_stats %>%
mutate(RC = ((H+BB+HBP)*TB)/(AB+BB+HBP),
err = abs(RC-R))
# Calculate mean absolute deviation for Runs Scored vs prediction
mad_rc <- mean(team_stats$err)
# On average this simple prediction is off by about 28.5 runs compared to the
# actual runs scored. Since the average runs scored was 733.6, our prediction
# has an average error of only 3.9%.
# What is this complicated formula? Let's think of it like this:
# We are multiplying (H+BB+HBP+IBB) by TB / (AB+BB+IBB+HBP).This fraction is
# really a rate of bases per at bat. And we multiply this by total amount
# of actual base runners, so it is ultimately # of base runners * rate
# they are advanced. Pretty neat.
# Plotting both results
team_stats <- team_stats %>%
dplyr::select(Tm, R, RC) %>%
melt(id.vars = "Tm")
ggplot(team_stats, aes(x=reorder(Tm, value), y=value)) +
geom_point(aes(colour = variable)) +
xlab("Team") +
ylab("Runs Created 2021") +
scale_x_discrete(guide = guide_axis(n.dodge=3))
# Notice how with this simple formula the RC nearly always underestimates the
# actual number of runs scored. This will be something to keep our eye on.
#####################################################################
# Using basic RC formula for players
# Now the discussion turns to evaluating players. How can we use this information
# to determine the runs created by an individual player and how can we use this
# to compare players?
player_stats <- read.csv("2021_batter_stats.csv")
head(player_stats)
# Using the formula from above to get total runs created for specific players
player_stats <- player_stats %>%
filter(last_name %in% c("Goldschmidt",
"Arenado",
"Ohtani",
"Harper",
"Ramirez")) %>%
mutate(RC = ((H+BB+HBP)*TB)/(AB+BB+HBP) )
# This RC value gives us the total number of runs created, using our formula,
# for the entire season. Now lets look at runs created per game for each of
# these players.
# To get RC/G we cannot just divide runs created by 162 because that would
# not be an accurate representation of the players influence and impact on
# games throughout the season. Sometime he hits more sometimes he hits less in
# each game.
# We can, however get the number of outs the player "consumed" during the season.
# Then we can determine how many runs a player created compared to the number
# of outs he creates. And since we know the number of outs in a game we can get
# RC/G.
# Outs is really AB - H - 0.018*AB where the 0.18 comes from a 1.8% chance of
# an error. Then we add in additional outs which come from SB, SF, CS, and GIDP.
# Lets get number of outs for each player:
player_stats <- player_stats %>%
mutate(Outs =  0.982*AB-H+GIDP+SF+SB+CS,
Games_used = Outs / 27,
RC_G = RC/Games_used)
